# CVE-2025-54313 IOC Scanner for Windows
# Scans for Indicators of the eslint-config-prettier Supply Chain Attack
# Version: 1.0
# Date: July 2025

param(
    [Parameter(HelpMessage="Path to scan (Default: C:\)")]
    [string]$ScanPath = "C:\",
    
    [Parameter(HelpMessage="Quick scan in current directory only")]
    [switch]$QuickScan,
    
    [Parameter(HelpMessage="Detailed output")]
    [switch]$DetailedOutput,
    
    [Parameter(HelpMessage="Export path for report")]
    [string]$ReportPath = ".\CVE-2025-54313-Report-$(Get-Date -Format 'yyyyMMdd-HHmmss').txt"
)

# Colors for output
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# Banner
Write-ColorOutput @"
================================================
    CVE-2025-54313 IOC Scanner
    eslint-config-prettier Supply Chain Attack
================================================
"@ -Color Cyan

# Global variables for findings
$script:findings = @{
    CompromisedPackages = @()
    SuspiciousFiles = @()
    MaliciousCode = @()
    PostInstallScripts = @()
    DLLFiles = @()
    NPMRCFiles = @()
    TempFiles = @()
    Timeline = @()
}

# Compromised package versions
$compromisedPackages = @{
    "eslint-config-prettier" = @("8.10.1", "9.1.1", "10.1.6", "10.1.7")
    "eslint-plugin-prettier" = @("4.2.2", "4.2.3")
    "synckit" = @("0.11.9")
    "@pkgr/core" = @("0.2.8")
    "napi-postinstall" = @("0.3.1")
    "is" = @("3.3.1", "5.0.0")
}

# SHA256 hash of known node-gyp.dll
$knownMaliciousHashes = @(
    "c68e42f416f482d43653f36cd14384270b54b68d6496a8e34ce887687de5b441"
)

# Suspicious code patterns
$suspiciousPatterns = @(
    'logDiskSpace\s*\(',
    "os\.platform\s*\(\)\s*===\s*['""]win32['""]",
    'chi.*ld_pro.*cess',
    'sp.*awn',
    'rund.*ll32',
    'node-gyp\.dll',
    'rundll32.*node-gyp\.dll.*main',
    'FuckOff',
    'loader\.dll'
)

# Function: Check node_modules directory
function Check-NodeModules {
    param([string]$Path)
    
    Write-ColorOutput "`n[*] Checking node_modules in: $Path" -Color Yellow
    
    $nodeModulesPath = Join-Path $Path "node_modules"
    if (-not (Test-Path $nodeModulesPath)) {
        return
    }
    
    foreach ($package in $compromisedPackages.Keys) {
        $packagePath = Join-Path $nodeModulesPath $package
        if (Test-Path $packagePath) {
            $packageJsonPath = Join-Path $packagePath "package.json"
            if (Test-Path $packageJsonPath) {
                try {
                    $packageJson = Get-Content $packageJsonPath | ConvertFrom-Json
                    $version = $packageJson.version
                    
                    if ($compromisedPackages[$package] -contains $version) {
                        Write-ColorOutput "[!] FOUND: Compromised package - $package@$version" -Color Red
                        $script:findings.CompromisedPackages += [PSCustomObject]@{
                            Package = $package
                            Version = $version
                            Path = $packagePath
                            Timestamp = (Get-Item $packagePath).LastWriteTime
                        }
                    }
                } catch {}
            }
        }
    }
}

# Function: Search for install.js files
function Find-InstallScripts {
    param([string]$Path)
    
    Write-ColorOutput "`n[*] Searching for suspicious install.js files..." -Color Yellow
    
    Get-ChildItem -Path $Path -Filter "install.js" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
        $content = Get-Content $_.FullName -Raw -ErrorAction SilentlyContinue
        if ($content) {
            foreach ($pattern in $suspiciousPatterns) {
                if ($content -match $pattern) {
                    Write-ColorOutput "[!] Suspicious install.js found: $($_.FullName)" -Color Red
                    Write-ColorOutput "    Pattern found: $pattern" -Color Yellow
                    
                    $script:findings.SuspiciousFiles += [PSCustomObject]@{
                        File = $_.FullName
                        Pattern = $pattern
                        Size = $_.Length
                        LastModified = $_.LastWriteTime
                        Hash = (Get-FileHash $_.FullName -Algorithm SHA256).Hash
                    }
                    break
                }
            }
        }
    }
}

# Function: Search for DLL files
function Find-SuspiciousDLLs {
    param([string]$Path)
    
    Write-ColorOutput "`n[*] Searching for suspicious DLL files..." -Color Yellow
    
    $dllPatterns = @("node-gyp.dll", "loader.dll", "version.dll", "umpdc.dll", "profapi.dll")
    
    foreach ($dllName in $dllPatterns) {
        Get-ChildItem -Path $Path -Filter $dllName -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
            $hash = (Get-FileHash $_.FullName -Algorithm SHA256).Hash
            $isMalicious = $knownMaliciousHashes -contains $hash
            
            if ($isMalicious) {
                Write-ColorOutput "[!!!] MALWARE FOUND: $($_.FullName)" -Color Red
                Write-ColorOutput "      SHA256: $hash" -Color Red
            } else {
                Write-ColorOutput "[!] Suspicious DLL found: $($_.FullName)" -Color Yellow
            }
            
            $script:findings.DLLFiles += [PSCustomObject]@{
                File = $_.FullName
                FileName = $_.Name
                Hash = $hash
                IsMalicious = $isMalicious
                Size = $_.Length
                LastModified = $_.LastWriteTime
                CreationTime = $_.CreationTime
            }
        }
    }
}

# Function: Check package.json for postinstall scripts
function Check-PostInstallScripts {
    param([string]$Path)
    
    Write-ColorOutput "`n[*] Checking package.json files for postinstall scripts..." -Color Yellow
    
    Get-ChildItem -Path $Path -Filter "package.json" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
        try {
            $content = Get-Content $_.FullName | ConvertFrom-Json
            if ($content.scripts.postinstall) {
                $postinstall = $content.scripts.postinstall
                
                # Check for suspicious commands
                if ($postinstall -match "install\.js" -or $postinstall -match "node\s+install") {
                    Write-ColorOutput "[!] Suspicious postinstall script: $($_.FullName)" -Color Red
                    Write-ColorOutput "    Command: $postinstall" -Color Yellow
                    
                    $script:findings.PostInstallScripts += [PSCustomObject]@{
                        File = $_.FullName
                        Package = $content.name
                        Version = $content.version
                        PostInstall = $postinstall
                        LastModified = $_.LastWriteTime
                    }
                }
            }
        } catch {}
    }
}

# Function: Search for .npmrc files
function Find-NPMRCFiles {
    Write-ColorOutput "`n[*] Searching for .npmrc files (may be compromised)..." -Color Yellow
    
    $npmrcLocations = @(
        "$env:USERPROFILE\.npmrc",
        "$env:APPDATA\npm\.npmrc",
        "$env:USERPROFILE\.config\npm\.npmrc"
    )
    
    foreach ($location in $npmrcLocations) {
        if (Test-Path $location) {
            Write-ColorOutput "[!] .npmrc found: $location" -Color Yellow
            Write-ColorOutput "    Check this file for unusual tokens!" -Color Yellow
            
            $script:findings.NPMRCFiles += [PSCustomObject]@{
                File = $location
                Size = (Get-Item $location).Length
                LastModified = (Get-Item $location).LastWriteTime
            }
        }
    }
}

# Function: Check Temp directory
function Check-TempDirectory {
    Write-ColorOutput "`n[*] Checking TEMP directory for suspicious files..." -Color Yellow
    
    $tempPath = $env:TEMP
    $cutoffDate = (Get-Date "2025-07-18")
    
    Get-ChildItem -Path $tempPath -File -ErrorAction SilentlyContinue | 
        Where-Object { $_.CreationTime -gt $cutoffDate -and ($_.Extension -eq ".dll" -or $_.Extension -eq ".tmp") } |
        ForEach-Object {
            Write-ColorOutput "[!] Suspicious temp file: $($_.Name)" -Color Yellow
            
            $script:findings.TempFiles += [PSCustomObject]@{
                File = $_.FullName
                Size = $_.Length
                Created = $_.CreationTime
                Hash = (Get-FileHash $_.FullName -Algorithm SHA256 -ErrorAction SilentlyContinue).Hash
            }
        }
}

# Function: Timeline analysis
function Analyze-Timeline {
    Write-ColorOutput "`n[*] Performing timeline analysis..." -Color Yellow
    
    $criticalDate = Get-Date "2025-07-18"
    
    # Collect all relevant files with timestamps after critical date
    $allFindings = @()
    $allFindings += $script:findings.CompromisedPackages | ForEach-Object { 
        [PSCustomObject]@{Type = "Package"; Item = $_; Time = $_.Timestamp}
    }
    $allFindings += $script:findings.SuspiciousFiles | ForEach-Object { 
        [PSCustomObject]@{Type = "File"; Item = $_; Time = $_.LastModified}
    }
    $allFindings += $script:findings.DLLFiles | ForEach-Object { 
        [PSCustomObject]@{Type = "DLL"; Item = $_; Time = $_.LastModified}
    }
    
    $suspiciousTimeline = $allFindings | Where-Object { $_.Time -gt $criticalDate } | Sort-Object Time
    
    if ($suspiciousTimeline) {
        Write-ColorOutput "[!] Suspicious activities found after July 18, 2025:" -Color Red
        $script:findings.Timeline = $suspiciousTimeline
    }
}

# Function: Generate report
function Generate-Report {
    $report = @"
=======================================================
CVE-2025-54313 IOC Scan Report
Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
Scan Path: $ScanPath
=======================================================

SUMMARY:
--------
Compromised packages found: $($script:findings.CompromisedPackages.Count)
Suspicious files: $($script:findings.SuspiciousFiles.Count)
DLL files: $($script:findings.DLLFiles.Count)
PostInstall scripts: $($script:findings.PostInstallScripts.Count)
NPMRC files: $($script:findings.NPMRCFiles.Count)

"@

    if ($script:findings.CompromisedPackages.Count -gt 0) {
        $report += "`nCOMPROMISED PACKAGES:`n"
        $report += "--------------------`n"
        foreach ($pkg in $script:findings.CompromisedPackages) {
            $report += "Package: $($pkg.Package)@$($pkg.Version)`n"
            $report += "Path: $($pkg.Path)`n"
            $report += "Timestamp: $($pkg.Timestamp)`n`n"
        }
    }

    if ($script:findings.DLLFiles.Count -gt 0) {
        $report += "`nDLL FILES:`n"
        $report += "---------`n"
        foreach ($dll in $script:findings.DLLFiles) {
            $report += "File: $($dll.File)`n"
            $report += "Hash: $($dll.Hash)`n"
            $report += "Malicious: $($dll.IsMalicious)`n"
            $report += "Created: $($dll.CreationTime)`n`n"
        }
    }

    if ($script:findings.SuspiciousFiles.Count -gt 0) {
        $report += "`nSUSPICIOUS FILES:`n"
        $report += "----------------`n"
        foreach ($file in $script:findings.SuspiciousFiles) {
            $report += "File: $($file.File)`n"
            $report += "Pattern: $($file.Pattern)`n"
            $report += "Hash: $($file.Hash)`n`n"
        }
    }

    if ($script:findings.PostInstallScripts.Count -gt 0) {
        $report += "`nPOSTINSTALL SCRIPTS:`n"
        $report += "-------------------`n"
        foreach ($script in $script:findings.PostInstallScripts) {
            $report += "Package: $($script.Package)@$($script.Version)`n"
            $report += "File: $($script.File)`n"
            $report += "Command: $($script.PostInstall)`n`n"
        }
    }

    if ($script:findings.Timeline.Count -gt 0) {
        $report += "`nTIMELINE (After July 18, 2025):`n"
        $report += "-------------------------------`n"
        foreach ($event in $script:findings.Timeline) {
            $report += "$($event.Time.ToString('yyyy-MM-dd HH:mm:ss')) - $($event.Type): "
            
            switch ($event.Type) {
                "Package" { $report += "$($event.Item.Package)@$($event.Item.Version)`n" }
                "File" { $report += "$($event.Item.File)`n" }
                "DLL" { $report += "$($event.Item.File)`n" }
            }
        }
    }

    $report += @"

RECOMMENDATIONS:
----------------
1. Remove all compromised package versions immediately
2. Delete node_modules and run 'npm install' with safe versions
3. Check all .npmrc files for compromised tokens
4. Rotate all npm access tokens
5. Enable 2FA for npm accounts
6. Check systems for further compromises
7. Scan with antivirus for Scavenger malware

SAFE VERSIONS:
--------------
eslint-config-prettier: >= 8.10.2, >= 9.1.2, >= 10.1.8
eslint-plugin-prettier: Latest version except 4.2.2, 4.2.3
"@

    # Save report
    $report | Out-File -FilePath $ReportPath -Encoding UTF8
    Write-ColorOutput "`n[+] Report saved at: $ReportPath" -Color Green
    
    # Show summary
    Write-ColorOutput "`n=== SCAN SUMMARY ===" -Color Cyan
    
    if ($script:findings.CompromisedPackages.Count -gt 0 -or 
        ($script:findings.DLLFiles | Where-Object { $_.IsMalicious }).Count -gt 0) {
        Write-ColorOutput "[!!!] CRITICAL: System is compromised!" -Color Red
        Write-ColorOutput "      Immediate action required!" -Color Red
    } elseif ($script:findings.SuspiciousFiles.Count -gt 0 -or 
              $script:findings.PostInstallScripts.Count -gt 0) {
        Write-ColorOutput "[!] WARNING: Suspicious activities found" -Color Yellow
        Write-ColorOutput "    Further investigation recommended" -Color Yellow
    } else {
        Write-ColorOutput "[+] No direct IOCs found" -Color Green
        Write-ColorOutput "    Precautionary measures still recommended" -Color Green
    }
}

# Main program
try {
    Write-ColorOutput "Scan started: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -Color Green
    Write-ColorOutput "Scan path: $ScanPath" -Color Green
    
    if ($QuickScan) {
        $ScanPath = Get-Location
        Write-ColorOutput "Quick scan mode enabled - Scanning current directory only" -Color Yellow
    }
    
    # Perform scans
    if ($QuickScan) {
        Check-NodeModules -Path $ScanPath
        Find-InstallScripts -Path $ScanPath
        Check-PostInstallScripts -Path $ScanPath
    } else {
        # Full scan
        Write-ColorOutput "`n[*] Starting full system scan (this may take some time)..." -Color Yellow
        
        # Find all node_modules directories
        $nodeModulesDirs = Get-ChildItem -Path $ScanPath -Directory -Recurse -ErrorAction SilentlyContinue |
            Where-Object { $_.Name -eq "node_modules" } |
            Select-Object -ExpandProperty Parent
        
        Write-ColorOutput "[*] Found projects with node_modules: $($nodeModulesDirs.Count)" -Color Cyan
        
        foreach ($dir in $nodeModulesDirs) {
            Check-NodeModules -Path $dir.FullName
        }
        
        Find-InstallScripts -Path $ScanPath
        Find-SuspiciousDLLs -Path $ScanPath
        Check-PostInstallScripts -Path $ScanPath
    }
    
    # Additional checks
    Find-NPMRCFiles
    Check-TempDirectory
    Analyze-Timeline
    
    # Generate report
    Generate-Report
    
} catch {
    Write-ColorOutput "[!] Error during scan: $_" -Color Red
} finally {
    Write-ColorOutput "`nScan completed: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -Color Green
}

# Interactive actions
if ($script:findings.CompromisedPackages.Count -gt 0) {
    Write-Host "`nDo you want to automatically remove compromised packages? (Y/N): " -NoNewline
    $response = Read-Host
    
    if ($response -eq 'Y' -or $response -eq 'y') {
        foreach ($pkg in $script:findings.CompromisedPackages) {
            Write-ColorOutput "Removing $($pkg.Path)..." -Color Yellow
            Remove-Item -Path $pkg.Path -Recurse -Force -ErrorAction SilentlyContinue
        }
        Write-ColorOutput "[+] Compromised packages removed. Run 'npm install' to reinstall." -Color Green
    }
}
