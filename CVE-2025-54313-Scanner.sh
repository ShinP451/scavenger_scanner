#!/bin/bash

# CVE-2025-54313 IOC Scanner for Linux
# Scans for Indicators of the eslint-config-prettier Supply Chain Attack
# Version: 1.0
# Date: July 2025

# Exit on any error
set -e

# Default values
SCAN_PATH="."
QUICK_SCAN=false
DETAILED_OUTPUT=false
REPORT_PATH="./CVE-2025-54313-Report-$(date '+%Y%m%d-%H%M%S').txt"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local message="$1"
    local color="$2"
    case $color in
        "red") echo -e "${RED}${message}${NC}" ;;
        "green") echo -e "${GREEN}${message}${NC}" ;;
        "yellow") echo -e "${YELLOW}${message}${NC}" ;;
        "cyan") echo -e "${CYAN}${message}${NC}" ;;
        *) echo "$message" ;;
    esac
}

# Help function
show_help() {
    cat << EOF
CVE-2025-54313 IOC Scanner for Linux

Usage: $0 [OPTIONS]

OPTIONS:
    -p, --path PATH         Path to scan (Default: current directory)
    -q, --quick             Quick scan in current directory only
    -d, --detailed          Detailed output
    -r, --report PATH       Export path for report
    -h, --help              Show this help message

Examples:
    $0 -q                   Quick scan current directory
    $0 -p /home/user        Scan specific path
    $0 -q -d               Quick scan with detailed output
EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--path)
            SCAN_PATH="$2"
            shift 2
            ;;
        -q|--quick)
            QUICK_SCAN=true
            shift
            ;;
        -d|--detailed)
            DETAILED_OUTPUT=true
            shift
            ;;
        -r|--report)
            REPORT_PATH="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Banner
print_color "================================================" "cyan"
print_color "    CVE-2025-54313 IOC Scanner for Linux" "cyan"
print_color "    eslint-config-prettier Supply Chain Attack" "cyan"
print_color "================================================" "cyan"

# Global counters
COMPROMISED_PACKAGES=0
SUSPICIOUS_FILES=0
MALICIOUS_FILES=0
POSTINSTALL_SCRIPTS=0
NPMRC_FILES=0

# Results storage
RESULTS_FILE="/tmp/cve_scan_results_$$"
> "$RESULTS_FILE"  # Clear results file

# Compromised package versions (simple approach)
check_package_version() {
    local package="$1"
    local version="$2"
    
    case "$package" in
        "eslint-config-prettier")
            [[ "$version" == "8.10.1" || "$version" == "9.1.1" || "$version" == "10.1.6" || "$version" == "10.1.7" ]]
            ;;
        "eslint-plugin-prettier")
            [[ "$version" == "4.2.2" || "$version" == "4.2.3" ]]
            ;;
        "synckit")
            [[ "$version" == "0.11.9" ]]
            ;;
        "@pkgr/core")
            [[ "$version" == "0.2.8" ]]
            ;;
        "napi-postinstall")
            [[ "$version" == "0.3.1" ]]
            ;;
        "is")
            [[ "$version" == "3.3.1" || "$version" == "5.0.0" ]]
            ;;
        *)
            return 1
            ;;
    esac
}

# SHA256 hashes of known malicious files
check_malicious_hash() {
    local hash="$1"
    local malicious_hashes=(
        "c68e42f416f482d43653f36cd14384270b54b68d6496a8e34ce887687de5b441"
        "5bed39728e404838ecd679df65048abcb443f8c7a9484702a2ded60104b8c4a9"
        "32d0dbdfef0e5520ba96a2673244267e204b94a49716ea13bf635fa9af6f66bf"
    )
    
    for malicious_hash in "${malicious_hashes[@]}"; do
        if [[ "$hash" == "$malicious_hash" ]]; then
            return 0
        fi
    done
    return 1
}

# Extract version from package.json (fallback method)
extract_version() {
    local package_json="$1"
    if command -v jq &> /dev/null; then
        jq -r '.version // empty' "$package_json" 2>/dev/null
    else
        grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' "$package_json" 2>/dev/null | \
            sed 's/.*"\([^"]*\)".*/\1/' | head -1
    fi
}

# Extract package name from package.json
extract_name() {
    local package_json="$1"
    if command -v jq &> /dev/null; then
        jq -r '.name // empty' "$package_json" 2>/dev/null
    else
        grep -o '"name"[[:space:]]*:[[:space:]]*"[^"]*"' "$package_json" 2>/dev/null | \
            sed 's/.*"\([^"]*\)".*/\1/' | head -1
    fi
}

# Check node_modules directory
check_node_modules() {
    local path="$1"
    
    print_color "\n[*] Checking node_modules in: $path" "yellow"
    
    local node_modules_path="$path/node_modules"
    if [[ ! -d "$node_modules_path" ]]; then
        print_color "    No node_modules found" "yellow"
        return
    fi
    
    # Find all package.json files in node_modules
    while IFS= read -r -d '' package_json; do
        if [[ -f "$package_json" ]]; then
            local package_name=$(extract_name "$package_json")
            local version=$(extract_version "$package_json")
            
            if [[ -n "$package_name" && -n "$version" ]]; then
                if check_package_version "$package_name" "$version"; then
                    print_color "[!] FOUND: Compromised package - $package_name@$version" "red"
                    echo "COMPROMISED_PACKAGE:$package_name:$version:$(dirname "$package_json")" >> "$RESULTS_FILE"
                    ((COMPROMISED_PACKAGES++))
                fi
            fi
        fi
    done < <(find "$node_modules_path" -name "package.json" -type f -print0 2>/dev/null)
}

# Search for install.js files
find_install_scripts() {
    local path="$1"
    
    print_color "\n[*] Searching for suspicious install.js files..." "yellow"
    
    while IFS= read -r -d '' file; do
        if [[ -f "$file" ]]; then
            # Check for suspicious patterns
            if grep -q "logDiskSpace\|child_process\|spawn\|rundll32\|node-gyp\|FuckOff" "$file" 2>/dev/null; then
                print_color "[!] Suspicious install.js found: $file" "red"
                local hash=$(sha256sum "$file" 2>/dev/null | cut -d' ' -f1)
                
                if check_malicious_hash "$hash"; then
                    print_color "[!!!] MALWARE DETECTED: Known malicious hash!" "red"
                    ((MALICIOUS_FILES++))
                else
                    ((SUSPICIOUS_FILES++))
                fi
                
                echo "SUSPICIOUS_FILE:$file:$hash" >> "$RESULTS_FILE"
            fi
        fi
    done < <(find "$path" -name "install.js" -type f -print0 2>/dev/null)
}

# Search for suspicious shared libraries
find_suspicious_libraries() {
    local path="$1"
    
    print_color "\n[*] Searching for suspicious library files..." "yellow"
    
    local lib_patterns=("node-gyp.so" "loader.so" "version.so" "*.dll")
    
    for pattern in "${lib_patterns[@]}"; do
        while IFS= read -r -d '' file; do
            if [[ -f "$file" ]]; then
                local hash=$(sha256sum "$file" 2>/dev/null | cut -d' ' -f1)
                
                if check_malicious_hash "$hash"; then
                    print_color "[!!!] MALWARE FOUND: $file" "red"
                    print_color "      SHA256: $hash" "red"
                    ((MALICIOUS_FILES++))
                else
                    print_color "[!] Suspicious library found: $file" "yellow"
                    ((SUSPICIOUS_FILES++))
                fi
                
                echo "LIBRARY_FILE:$file:$hash" >> "$RESULTS_FILE"
            fi
        done < <(find "$path" -name "$pattern" -type f -print0 2>/dev/null)
    done
}

# Check package.json for postinstall scripts
check_postinstall_scripts() {
    local path="$1"
    
    print_color "\n[*] Checking package.json files for postinstall scripts..." "yellow"
    
    while IFS= read -r -d '' file; do
        if [[ -f "$file" ]]; then
            if grep -q '"postinstall"' "$file" 2>/dev/null; then
                local postinstall=""
                if command -v jq &> /dev/null; then
                    postinstall=$(jq -r '.scripts.postinstall // empty' "$file" 2>/dev/null)
                else
                    postinstall=$(grep -A1 '"postinstall"' "$file" 2>/dev/null | tail -1 | sed 's/.*"\([^"]*\)".*/\1/')
                fi
                
                if [[ -n "$postinstall" && ("$postinstall" =~ install\.js || "$postinstall" =~ node.*install) ]]; then
                    print_color "[!] Suspicious postinstall script: $file" "red"
                    print_color "    Command: $postinstall" "yellow"
                    echo "POSTINSTALL:$file:$postinstall" >> "$RESULTS_FILE"
                    ((POSTINSTALL_SCRIPTS++))
                fi
            fi
        fi
    done < <(find "$path" -name "package.json" -type f -print0 2>/dev/null)
}

# Search for .npmrc files
find_npmrc_files() {
    print_color "\n[*] Searching for .npmrc files..." "yellow"
    
    local npmrc_locations=(
        "$HOME/.npmrc"
        "$HOME/.config/npm/.npmrc"
        "/usr/local/etc/npmrc"
        "/etc/npmrc"
    )
    
    for location in "${npmrc_locations[@]}"; do
        if [[ -f "$location" ]]; then
            print_color "[!] .npmrc found: $location" "yellow"
            print_color "    Check this file for unusual tokens!" "yellow"
            echo "NPMRC:$location" >> "$RESULTS_FILE"
            ((NPMRC_FILES++))
        fi
    done
}

# Generate report
generate_report() {
    print_color "\n[*] Generating report..." "yellow"
    
    cat > "$REPORT_PATH" << EOF
=======================================================
CVE-2025-54313 IOC Scan Report
Generated: $(date '+%Y-%m-%d %H:%M:%S')
Scan Path: $SCAN_PATH
=======================================================

SUMMARY:
--------
Compromised packages found: $COMPROMISED_PACKAGES
Suspicious files: $SUSPICIOUS_FILES
Malicious files: $MALICIOUS_FILES
PostInstall scripts: $POSTINSTALL_SCRIPTS
NPMRC files: $NPMRC_FILES

DETAILED FINDINGS:
------------------
EOF

    if [[ -f "$RESULTS_FILE" ]]; then
        while IFS= read -r line; do
            echo "$line" >> "$REPORT_PATH"
        done < "$RESULTS_FILE"
    fi
    
    cat >> "$REPORT_PATH" << EOF

RECOMMENDATIONS:
----------------
1. Remove all compromised package versions immediately
2. Delete node_modules and run 'npm install' with safe versions
3. Check all .npmrc files for compromised tokens
4. Rotate all npm access tokens
5. Enable 2FA for npm accounts
6. Check systems for further compromises
7. Scan with antivirus for malware

SAFE VERSIONS:
--------------
eslint-config-prettier: >= 8.10.2, >= 9.1.2, >= 10.1.8
eslint-plugin-prettier: Latest version except 4.2.2, 4.2.3

Scan completed at: $(date)
EOF

    print_color "[+] Report saved at: $REPORT_PATH" "green"
}

# Show summary
show_summary() {
    print_color "\n=== SCAN SUMMARY ===" "cyan"
    
    if [[ $MALICIOUS_FILES -gt 0 || $COMPROMISED_PACKAGES -gt 0 ]]; then
        print_color "[!!!] CRITICAL: System is compromised!" "red"
        print_color "      Immediate action required!" "red"
    elif [[ $SUSPICIOUS_FILES -gt 0 || $POSTINSTALL_SCRIPTS -gt 0 ]]; then
        print_color "[!] WARNING: Suspicious activities found" "yellow"
        print_color "    Further investigation recommended" "yellow"
    else
        print_color "[+] No direct IOCs found" "green"
        print_color "    Precautionary measures still recommended" "green"
    fi
    
    print_color "\nResults:" "cyan"
    print_color "  Compromised packages: $COMPROMISED_PACKAGES" "white"
    print_color "  Suspicious files: $SUSPICIOUS_FILES" "white"
    print_color "  Malicious files: $MALICIOUS_FILES" "white"
    print_color "  PostInstall scripts: $POSTINSTALL_SCRIPTS" "white"
    print_color "  NPMRC files: $NPMRC_FILES" "white"
}

# Cleanup function
cleanup() {
    [[ -f "$RESULTS_FILE" ]] && rm -f "$RESULTS_FILE"
}

# Set trap for cleanup
trap cleanup EXIT

# Main program
main() {
    print_color "Scan started: $(date '+%Y-%m-%d %H:%M:%S')" "green"
    print_color "Scan path: $SCAN_PATH" "green"
    
    # Check if jq is available
    if ! command -v jq &> /dev/null; then
        print_color "[!] Info: jq not found. Using fallback JSON parsing." "yellow"
    fi
    
    # Validate scan path
    if [[ ! -d "$SCAN_PATH" ]]; then
        print_color "[!] Error: Scan path does not exist: $SCAN_PATH" "red"
        exit 1
    fi
    
    # Perform scans
    if $QUICK_SCAN; then
        print_color "\n[*] Quick scan mode - current directory only" "yellow"
        check_node_modules "$SCAN_PATH"
        find_install_scripts "$SCAN_PATH"
        check_postinstall_scripts "$SCAN_PATH"
    else
        print_color "\n[*] Full scan mode" "yellow"
        
        # Find all directories containing node_modules
        print_color "[*] Searching for Node.js projects..." "cyan"
        found_projects=0
        while IFS= read -r -d '' dir; do
            local parent_dir=$(dirname "$dir")
            check_node_modules "$parent_dir"
            ((found_projects++))
        done < <(find "$SCAN_PATH" -type d -name "node_modules" -print0 2>/dev/null)
        
        print_color "[*] Found $found_projects Node.js projects" "cyan"
        
        find_install_scripts "$SCAN_PATH"
        find_suspicious_libraries "$SCAN_PATH"
        check_postinstall_scripts "$SCAN_PATH"
    fi
    
    # Additional checks
    find_npmrc_files
    
    # Generate report and show summary
    generate_report
    show_summary
    
    print_color "\nScan completed: $(date '+%Y-%m-%d %H:%M:%S')" "green"
}

# Run main function
main